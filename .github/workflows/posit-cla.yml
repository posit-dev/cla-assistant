name: "CLA Assistant"
on:
  workflow_call:
    secrets:
      CLA_ASSISTANT_PAT:
        required: true

# explicitly configure permissions, in case your GITHUB_TOKEN workflow permissions are set to read-only in repository settings
jobs:
  CLAAssistant:
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
      pull-requests: write
      statuses: write
    steps:
      # Escaping needs to be carefully handled, because github.event.comment.body can include
      # any character including quotes and newlines. The only safe way to do this that I could
      # think of, is heredocs with unpredictable delimiters.
      - name: "Generate random delimiter for heredocs"
        id: random_delimiter
        run: |
          echo -n "value=" >> $GITHUB_OUTPUT
          tr -dc A-Za-z0-9 </dev/urandom | head -c 60 >> $GITHUB_OUTPUT
          echo >> $GITHUB_OUTPUT
      # It's extremely easy to accidentally include a trailing newline or two, which GitHub
      # won't even show in its rendering of the comment. The result is nothing happening,
      # despite the comment looking completely correct. So go out of our way to strip the
      # newlines.
      - name: "Strip whitespace from comment body"
        id: strip_whitespace
        run: |
          echo "body<<${{ steps.random_delimiter.outputs.value }}" >> $GITHUB_OUTPUT
          cat << "${{ steps.random_delimiter.outputs.value }}" | sed '/^[[:space:]]*$/d; s/^[[:space:]]*//; s/[[:space:]]*$//' >> $GITHUB_OUTPUT
          ${{ github.event.comment.body }}
          ${{ steps.random_delimiter.outputs.value }}
          echo "${{ steps.random_delimiter.outputs.value }}" >> $GITHUB_OUTPUT
      # - name: "Debug output"
      #   run: |
      #     echo "body:'${{ steps.strip_whitespace.outputs.body }}'"
      - name: "CLA Assistant"
        if: (steps.strip_whitespace.outputs.body == 'recheck' || steps.strip_whitespace.outputs.body == 'I have read the CLA Document and I hereby sign the CLA') || github.event_name == 'pull_request_target'
        uses: posit-dev/cla-assistant-github-action@v2.4.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # the below token should have repo scope and must be manually added by you in the repository's secret
          # This token is required only if you have configured to store the signatures in a remote repository/organization
          PERSONAL_ACCESS_TOKEN: ${{ secrets.CLA_ASSISTANT_PAT }}
        with:
          # Specify that our signatures are kept in posit-dev/cla-assistant-signatures@main
          remote-organization-name: posit-dev
          remote-repository-name: cla-assistant-signatures
          branch: "main"
          path-to-signatures: "signatures/version1/cla.json"
          custom-notsigned-prcomment: >
            Thank $you for this PR! We ask that you sign our 
            [Contributor License Agreement](https://posit.co/individual-contributor-agreement/) 
            before we accept your contribution. You can sign the CLA by posting 
            a comment on this PR saying:

            # This allowlist is seeded with most of the members of the Positron
            # repository. In the future, we may do something smarter here, such
            # as plumbing an allow list through as a parameter, or reading it
            # from another source instead of hardcoding it.
          allowlist: DavisVaughan, dfalbel, isabelizimm, jonvanausdeln, lionel-, nstrayer, petetronic, seeM, sharon-wang, softwarenerd, timtmok, wesm

          # the followings are the optional inputs - If the optional inputs are not given, then default values will be taken
          #remote-organization-name: enter the remote organization name where the signatures should be stored (Default is storing the signatures in the same repository)
          #remote-repository-name: enter the  remote repository name where the signatures should be stored (Default is storing the signatures in the same repository)
          #create-file-commit-message: 'For example: Creating file for storing CLA Signatures'
          #signed-commit-message: 'For example: $contributorName has signed the CLA in $owner/$repo#$pullRequestNo'
          #custom-notsigned-prcomment: 'pull request comment with Introductory message to ask new contributors to sign'
          #custom-pr-sign-comment: 'The signature to be committed in order to sign the CLA'
          #custom-allsigned-prcomment: 'pull request comment when all contributors has signed, defaults to **CLA Assistant Lite bot** All Contributors have signed the CLA.'
          #lock-pullrequest-aftermerge: false - if you don't want this bot to automatically lock the pull request after merging (default - true)
          #use-dco-flag: true - If you are using DCO instead of CLA

